{
  "label": "CY_BORG (Macro)",
  "entries": {
    "Discharged CorpKiller Create": {
      "name": "Creazione del CorpKiller Abbandonato",
      "command": "(async () => {\n  if (!actor || !actor.findItem(\"feat\", \"Esperto in Granate\")) {\n    return;\n  }\n  const grenade = actor.findItem(\"weapon\", \"Granata a Mano\");\n  const flashbang = actor.findItem(\"weapon\", \"Granata Stordente\");\n  if (grenade) {\n    const quantity = actor.system.abilities.toughness.value + 5;\n    await grenade.update({[\"system.quantity\"]: quantity});\n  }\n  if (flashbang) {\n    await flashbang.update({[\"system.quantity\"]: 5});\n  }\n})();"
    },
    "Orphaned Gearhead Create": {
      "name": "Creazione del Meccanico Orfano",
      "command": "(async () => {\n  if (!actor) {\n    return;\n  }\n  const vehicle = actor.ownedVehicles().shift();\n  if (!vehicle) {\n    return;\n  }\n\n  let hpFormula = null;\n  const descript = vehicle.system.description.toLowerCase();\n  if (descript.includes(\"deambulatore semi-autonomo\")) {\n    hpFormula = \"1d8+@abilities.knowledge.value\";\n  } else if (descript.includes(\"drone volante\")) {\n    hpFormula = \"1d12+@abilities.knowledge.value\";\n  } else if (descript.includes(\"prototipo di drone cingolato\")) {\n    hpFormula = \"1d10+@abilities.knowledge.value\";\n  }\n  if (hpFormula) {\n    const roll = new Roll(hpFormula, actor.getRollData()).evaluate({async: false});\n    await vehicle.update({\n      [\"system.hitPoints.max\"]: roll.total, \n      [\"system.hitPoints.value\"]: roll.total, \n    });\n  }\n})();"
    },
    "Starting Cyberdeck Slots": {
      "name": "Slot iniziali del Cyberdeck",
      "command": "(async () => {\n  if (!actor) {\n    console.error(\"Nessun attore fornito al macro\");\n    return;\n  }\n  const item = actor.findItem(\"cyberdeck\", \"Cyberdeck Iniziale\");\n  if (!item) {\n    console.log(\"Cyberdeck Iniziale non trovato\");\n    return;\n  }\n  const slots = new Roll(\"d3\").evaluate({async: false}).total;\n  await item.update({[\"system.slotFormula\"]: slots.toString()});\n})();"
    }
  }
}
